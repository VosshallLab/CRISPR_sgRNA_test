{
 "metadata": {
  "name": "",
  "signature": "sha256:f2c8d48548274cec4f38ceebb9f028db12ec6bbd097a3f5a49ecbd71d84cecb7"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#Analysis of indel rates in deep-sequencing PCR amplicons: alignment (step 1 of 2)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "script to align deep sequencing reads and detect indels caused by ZFN/TALEN/CRISPR<br>\n",
      "ben matthews 11/2014<br>\n",
      "bmatthews@rockefeller.edu<br>\n",
      "[http://github.com/bnmtthws/crispr_indel/](github)\n",
      "\n",
      "part 2 of 2: analysis\n",
      "\n",
      "---\n",
      "python package requirements:<br>\n",
      "1. numpy\n",
      "2. pandas\n",
      "3. seaborn\n",
      "\n",
      "---\n",
      "input:\n",
      "1. *.variant.stats file summarizing indel/SNP rates for each sample (generated from previous notebook)\n",
      "2. legend for genome.fa detailing predicted CRISPR site(s)\n",
      "3. legend for samples indicating the predicted \n",
      "\n",
      "output:\n",
      "1. plots detailing indel frequency across amplicons\n",
      "2. data frame (that can be written to .csv file)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "###G0 samples from LV-02-13\n",
      "####5-6 individuals per sample"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "import seaborn\n",
      "import matplotlib as mp\n",
      "%matplotlib qt"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "read samples file (describing the relationship between S_num and other variables to plot)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "samples = pd.read_csv('legends/samples.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "read injections file (describing the location of CRISPR cut sites in the genome file)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "injections = pd.read_csv('legends/injections.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "read in all .variant stats files into a pandas DataFrame (add column with S_num)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "overall = pd.DataFrame()\n",
      "for sample in samples.iloc[0:,0]:\n",
      "    temp = pd.read_csv(sample + '.variant.stats',delimiter='\\t')\n",
      "    temp['S_num'] = sample\n",
      "    overall = overall.append(temp)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "filter by total read number (prevents analysis of reads that slip through Miseq demultiplexing)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "overall_filtered = overall[overall['reads_all'] > 1000][['S_num','chrom','pos','reads_all','insertions','deletions']]\n",
      "overall_filtered['indel_rate'] = (overall_filtered['insertions'] + overall_filtered['deletions']) / overall_filtered['reads_all']\n",
      "overall_filtered = overall_filtered.merge(samples,on='S_num')\n",
      "overall_filtered = overall_filtered.merge(injections,on=['injection','chrom'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "####filter data and select all ppk: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "overall_filtered"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "final_data = pd.DataFrame()\n",
      "\n",
      "for inj in injections.iterrows():\n",
      "    overall_filtered[overall_filtered['name_y'].isin([inj[1]['name']])]\n",
      "    temp = overall_filtered[overall_filtered['name_y'].isin([inj[1]['name']]) & overall_filtered['pos'].isin(range(inj[1]['cut_site'] - 30, inj[1]['cut_site'] + 30 ))]   \n",
      "    temp['sgRNA_pos'] = temp['pos'] - inj[1]['cut_site']\n",
      "    if inj[1]['strand'] == 'rev':\n",
      "        temp['sgRNA_pos'] = temp['sgRNA_pos'] * -1\n",
      "        \n",
      "    final_data = final_data.append(temp)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### plot the insertion and deletion rate, split by cas9 and by gene"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "seaborn.set_style(\"ticks\")\n",
      "ax = seaborn.factorplot('sgRNA_pos','indel_rate',col='name_y',hue='name_x',\n",
      "                   ci=95,kind='point',data=final_data,sharex=False,sharey=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "####write data to .csv file"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "final_data.to_csv('wtrw_LV0213_g0.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "####extract max. cut rate for each S_num and sgRNA"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "summary_data = final_data.groupby(['name_y','S_num'],as_index=False)[['indel_rate']].max()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "summary_data.to_csv('wtrw_LV0213_g0_summary.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "####plot max. cut rate for each sgRNA"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "seaborn.factorplot(data=summary_data,x='name_y',y='indel_rate',kind='bar')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "####mean max cut rate for wtrw G0s"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.mean(summary_data[summary_data['name_y'] == 'wtrwG0']['indel_rate'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### import data on HDR calculated from samtools, using commands of this format:\n",
      "samtools view S6.sorted.bam | cut -f3 | sort | uniq -c; samtools view S6.sorted.bam | grep TAATAAGGATCCATAACCTAAGG | grep wtrw | wc -l"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hdr_data = pd.read_csv('wtrw_g0_hdr_counts.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hdr_data = hdr_data.merge(summary_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "boxplot + scatterplot of HDR rates for the 6 samples"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mp.pyplot.boxplot(hdr_data['hdr_frac'])\n",
      "mp.pyplot.plot([1,1,1,1,1,1],hdr_data['hdr_frac'],'r.')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hdr_data['hdr_frac'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}